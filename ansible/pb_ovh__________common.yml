---
- name: Deploy docker and firewall
  hosts: ovh
  gather_facts: yes
  become: yes
  roles:
    - role: uZer.install-docker
    - role: uZer.shorewall
    - role: uZer.packages
      install_packages:
        Debian:
          - python-httplib2
          - python-simplejson
          - nfs-kernel-server
        RedHat: []


- name: Install Rancher-NFS server
  hosts: ovh
  gather_facts: yes
  become: yes
  tasks:
    - name: Create /data directory
      file:
        path: /data
        state: directory
      tags:
        - docker
        - nfs

    - name: launch NFS server container
      docker_container:
        name: nfs
        image: cpuguy83/nfs-server
        privileged: true
        volumes:
          - /data:/exports
        command:
          - /exports
      become: yes
      tags:
        - docker
        - nfs

- name: Deploy Rancher
  hosts: ovh
  gather_facts: yes
  become: yes
  vars_files:
   - vault.yml

  tasks:
    - name: Create mysql volume
      shell:
        docker volume create --name mysql-data
      become: yes
      tags:
        - rancher
        - docker
        - nfs

    - name: mysql container install
      docker_container:
        name: rancher-mysql-db
        image: "mysql:{{ rancher_mysql_version | default('latest') }}"
        restart_policy: always
        state: started
        env:
          MYSQL_ROOT_PASSWORD="{{ rancher_mysql_root_password }}"
          MYSQL_USER="{{ rancher_mysql_user | default('cattle') }}"
          MYSQL_PASSWORD="{{ rancher_mysql_password }}"
          MYSQL_DATABASE="{{ rancher_mysql_database | default('cattle') }}"
        volumes:
          - mysql-data:/var/lib/mysql
        ports:
          - "{{ ansible_default_ipv4.address }}:3306:3306"
      become: yes
      tags:
        - rancher
        - docker
        - nfs

    - name: run first master if needed (new cluster)
      docker_container:
        name: rancher-server
        image: "rancher/server:v{{ rancher_version }}"
        restart_policy: unless-stopped
        network_mode: host
        state: started
        command:
          --db-host {{ ansible_default_ipv4.address }} --db-port 3306 --db-user {{ rancher_mysql_user }} --db-pass {{ rancher_mysql_password }} --db-name {{ rancher_mysql_database }}
        published_ports:
          - "{{ ansible_default_ipv4.address }}:8080:8080"
      become: yes
      when: is_first_rancher_master
      tags:
        - docker
        - rancher
        - master

    - name: Wait until server is up
      wait_for:
        host: "{{ rancher_master_local_ip | default(ansible_default_ipv4.address)}}"
        port: "{{ rancher_master_local_port | default('8080') }}"

    - name: Add Api KEY ACCOUNT
      uri:
        method: POST
        status_code: 201
        url: "{{ rancher_master_local_url }}/v1/apikey"
        body : ' {"type":"apikey","accountId":"1a1","name":"ansible","description":null,"created":null,"kind":null,"removeTime":null,"removed":null,"uuid":null}'
        headers:
          User_Agent: "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:44.0) Gecko/20100101 Firefox/44.0"
          Accept: "application/json"
          Content-Type: "application/json"
        return_content: yes
      no_log: yes
      register: fluxApiKey
      when: not rancher_account_apikey_token is defined and is_first_rancher_master

    - set_fact:
        _token: "{{ fluxApiKey.json['publicValue'] }}"
        _secret: "{{ fluxApiKey.json['secretValue'] }}"
      no_log: yes
      when: not rancher_account_apikey_token is defined and is_first_rancher_master

    - name: Generate apikey configuration
      lineinfile:
        dest: "{{ inventory_dir }}/group_vars/all/apikey.yml"
        create: yes
        regexp: '^rancher_account_apikey_token: {{ _token }}'
        line: 'rancher_account_apikey_token: {{ _token }}'
      delegate_to: localhost
      no_log: yes
      become: no
      when: not rancher_account_apikey_token is defined and is_first_rancher_master

    - name: Generate apikey configuration
      lineinfile:
        dest: "{{ inventory_dir }}/group_vars/all/apikey.yml"
        create: yes
        regexp: '^rancher_account_apikey_secret: {{ _secret }}'
        line: 'rancher_account_apikey_secret: {{ _secret }}'
      delegate_to: localhost
      no_log: yes
      become: no
      when: not rancher_account_apikey_token is defined and is_first_rancher_master

    - name: Encrypt file
      shell:
        "ansible-vault encrypt {{ inventory_dir }}/group_vars/all/apikey.yml"
      delegate_to: localhost
      become: no
      when: not rancher_account_apikey_token is defined and is_first_rancher_master

    - set_fact:
        rancher_account_apikey_secret: "{{ _secret }}"
        rancher_account_apikey_token:  "{{ _token }}"
      no_log: yes
      when: not rancher_account_apikey_token is defined and is_first_rancher_master

    - name: Enable access control for admin_fallback
      uri:
        method: POST
        status_code: 201
        url: "{{ rancher_master_local_url }}/v1/localauthconfigs"
        user: "{{ rancher_account_apikey_token }}"
        password: "{{ rancher_account_apikey_secret }}"
        headers:
          Accept: "application/json"
          Content-Type: "application/json"
        body: ' {"accessMode":"unrestricted", "enabled":true, "name":"{{ rancher_admin_fallback_login }}", "password":"{{ rancher_admin_fallback_password }}", "username":"{{ rancher_admin_fallback_login }}"}'
      # when: not rancher_account_apikey_token is defined
      when: is_first_rancher_master

    # - name: Set docker registration URL
      # uri:
        # method: PUT
        # status_code: 200
        # url: "{{ rancher_master_local_url }}/v1/settings/api.host"
        # user: "{{ rancher_account_apikey_token }}"
        # password: "{{ rancher_account_apikey_secret }}"
        # headers:
          # Accept: "application/json"
          # Content-Type: "application/json"
        # body: ' {"value":"{{ rancher_master_local_url }}"}'
      # when: is_first_rancher_master

    - name: Check if host is already an agent
      shell:
        docker ps -a
      changed_when: false
      register: _containerlist
      check_mode: no
      become: yes
      tags:
        - docker
        - rancher
        - master
        - agent

    - include_vars: "{{ inventory_dir }}/group_vars/all/apikey.yml"

    - name: Trigger the projet token url generation
      uri:
        method: POST
        user: "{{ rancher_account_apikey_token }}"
        password: "{{ rancher_account_apikey_secret }}"
        url: "{{ rancher_master_local_url }}/v1/registrationtokens?projectId={{ rancher_host_project_id }}"
        return_content: yes
        status_code: 201
      when: "'rancher-agent' not in _containerlist.stdout"
      tags:
        - docker
        - rancher
        - master
        - agent

    - name: Return the registration token URL of Rancher server
      uri:
        method: GET
        user: "{{ rancher_account_apikey_token }}"
        password: "{{ rancher_account_apikey_secret }}"
        url: "{{ rancher_master_local_url }}/v1/projects/{{ rancher_host_project_id }}/registrationtokens"
        return_content: yes
      register: rancher_token_url
      when: "'rancher-agent' not in _containerlist.stdout"
      tags:
        - docker
        - rancher
        - master
        - agent

    - set_fact:
        _rtoken: "{{ rancher_token_url.json['data'][0]['token'] }}"
      when: "'rancher-agent' not in _containerlist.stdout"
      tags:
        - docker
        - rancher
        - master
        - agent

    - name: Create docker agent container
      docker_container:
        name: docker-agent-spawner
        image: "rancher/agent:v{{ rancher_agent_version }}"
        state: started
        cleanup: yes
        privileged: yes
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /var/lib/rancher:/var/lib/rancher
        command: "{{ rancher_master_local_url }}/v1/scripts/{{ _rtoken }}"
        env:
          CATTLE_AGENT_IP: "127.0.0.1"
      when: "'rancher-agent' not in _containerlist.stdout"
      become: yes
      tags:
        - docker
        - agent
        - rancher
        - master

# vim:ft=ansible:
